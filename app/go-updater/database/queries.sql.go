// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const checkPageExists = `-- name: CheckPageExists :one
SELECT
  EXISTS (
    SELECT
      1
    FROM
      "UpdateHistory"
    WHERE
      "hash" = ?1)
`

func (q *Queries) CheckPageExists(ctx context.Context, hash string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkPageExists, hash)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getUpdateHistory = `-- name: GetUpdateHistory :one
SELECT
  "checkedon", "hash", "pageurl"
FROM
  "UpdateHistory"
WHERE
  "pageURL" = ?1
`

func (q *Queries) GetUpdateHistory(ctx context.Context, pageurl string) (UpdateHistory, error) {
	row := q.db.QueryRowContext(ctx, getUpdateHistory, pageurl)
	var i UpdateHistory
	err := row.Scan(&i.Checkedon, &i.Hash, &i.Pageurl)
	return i, err
}

const upsertAlbum = `-- name: UpsertAlbum :exec
INSERT INTO "Album" ("name", "year", "rating", "artistUrl", "imageUrl", "pageURL")
  VALUES (?1, ?2, ?3, ?4, ?5, ?6)
ON CONFLICT ("artistUrl", "name")
  DO UPDATE SET
    "year" = excluded."year", "rating" = excluded."rating", "imageUrl" = excluded."imageUrl",
      "pageURL" = excluded."pageURL"
`

type UpsertAlbumParams struct {
	Name      string
	Year      sql.NullInt64
	Rating    float64
	ArtistUrl string
	ImageUrl  sql.NullString
	PageURL   string
}

func (q *Queries) UpsertAlbum(ctx context.Context, arg UpsertAlbumParams) error {
	_, err := q.db.ExecContext(ctx, upsertAlbum,
		arg.Name,
		arg.Year,
		arg.Rating,
		arg.ArtistUrl,
		arg.ImageUrl,
		arg.PageURL,
	)
	return err
}

const upsertArtist = `-- name: UpsertArtist :exec
INSERT INTO "Artist" ("url", "name", "bio", "imageUrl", "lastModified")
  VALUES (?1, ?2, ?3, ?4, DATE('now'))
ON CONFLICT ("url")
  DO UPDATE SET
    "name" = excluded."name", "bio" = excluded."bio", "imageUrl" = excluded."imageUrl",
      "lastModified" = excluded."lastModified"
`

type UpsertArtistParams struct {
	Url      string
	Name     string
	Bio      sql.NullString
	ImageUrl sql.NullString
}

func (q *Queries) UpsertArtist(ctx context.Context, arg UpsertArtistParams) error {
	_, err := q.db.ExecContext(ctx, upsertArtist,
		arg.Url,
		arg.Name,
		arg.Bio,
		arg.ImageUrl,
	)
	return err
}

const upsertUpdateHistory = `-- name: UpsertUpdateHistory :one
INSERT INTO "UpdateHistory" ("checkedOn", "hash", "pageURL")
  VALUES (?1, ?2, ?3)
ON CONFLICT ("pageURL")
  DO UPDATE SET
    "hash" = excluded."hash", "checkedOn" = excluded."checkedOn"
  WHERE
    excluded."hash" != "UpdateHistory"."hash"
  RETURNING
    "checkedOn", "hash", "pageURL"
`

type UpsertUpdateHistoryParams struct {
	CheckedOn time.Time
	Hash      string
	PageURL   string
}

func (q *Queries) UpsertUpdateHistory(ctx context.Context, arg UpsertUpdateHistoryParams) (UpdateHistory, error) {
	row := q.db.QueryRowContext(ctx, upsertUpdateHistory, arg.CheckedOn, arg.Hash, arg.PageURL)
	var i UpdateHistory
	err := row.Scan(&i.Checkedon, &i.Hash, &i.Pageurl)
	return i, err
}
